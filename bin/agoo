#!/usr/bin/env ruby

while (index = ARGV.index('-I'))
  _, path = ARGV.slice!(index, 2)
  $LOAD_PATH << path
end

# Always add ./lib to the load path as that is the default location for Ruby
# files in a project.
$LOAD_PATH << File.expand_path('./lib')

require 'optparse'
require 'fileutils'
require 'logger'

require 'agoo'

# Prepare the +usage+ string.
# Basically a banner text and description passed on +OptionParser+.
usage = %{
Usage: agoo [options] [<handler_class>@<path>]...

version #{Agoo::VERSION}

Agoo is a Ruby web server. It can be run as a standalone application using this
application. The handler/class arguments must have the form of <class>@<path>
where the class is the Ruby class where the new method takes not arguments and
has either a call() method or a on_request() method.

}

@verbose = 1
@port = 6464
@root = '.'
@log_dir = nil
@classic = true
@console = true
@colorize = true

@opts = OptionParser.new(usage)
@opts.on('-h', '--help', 'Show this display.')                                 { puts @opts.help; Process.exit!(0) }
@opts.on('-s', '--silent', 'Silent.')                                          { @verbose = 0 }
@opts.on('-v', '--verbose', 'Increase verbosity.')                             { @verbose += 1 }
@opts.on('-p', '--port PORT', Integer, 'Port to listen on.')                   { |p| @port = p }
@opts.on('-d', '--dir DIR', String, 'Directory to serve static assets from.')  { |d| @root = d }
@opts.on('-r', '--require FILE', String, 'Ruby require.')                      { |r| require r }
@opts.on('--log.dir DIR', String, 'Log file directory.')                       { |d| @log_dir = d }
@opts.on('--[no-]log.classic', 'Classic log entries instead of JSON.')         { |b| @classic = b }
@opts.on('--[no-]log.console', 'Display log entries on the console.')          { |b| @console = b }
@opts.on('--[no-]log.colorize', 'Display log entries in color.')               { |b| @colorize = b }

handler_paths = @opts.parse(ARGV)

server = Agoo::Server.new(@port, @root,
			  log_dir: @log_dir,
			  thread_count: 0,
			  log_console: @console,
			  log_classic: @classic,
			  log_colorize: @colorize,
			  log_states: {
			    INFO: 1 <= @verbose,
			    DEBUG: 3 <= @verbose,
			    connect: 2 <= @verbose,
			    request: 2 <= @verbose,
			    response: 2 <= @verbose,
			    eval: 2 <= @verbose,
			  })
puts "Agoo #{Agoo::VERSION} is listening on port #{@port}. Path mappings are:" if 1 <= @verbose

handler_paths.each { |hp|
  classname, path = hp.split('@')
  if classname.nil? || path.nil? || classname.empty? || path.empty?
    raise "Invalid handler/path specification. Both a class and path must be present."
  end
  c = Object.const_get(classname)
  server.handle(nil, path, c.new)
  if 1 <= @verbose
    puts "  #{path} => #{classname}"
  end
}

server.start()
